{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"descriptiveContext": {
			"type": "string",
			"defaultValue": "ase"
		},
		"environment" : {
			"defaultValue": "dev",
            "allowedValues": [
                "dev",
                "tst",
                "stg",
                "prd"
            ],
            "type": "String"
        },
        "projectName": {
            "defaultValue": "adap",
            "type": "String"
        },
        "airportLocationCode": {
			"allowedValues": [
                "mel",
                "syd"
            ],
            "defaultValue": "mel",
            "type": "String"
        },
		"resourceGroupLocation": {
			"allowedValues": [
                "australiasoutheast",
                "australiaeast"
            ],
            "defaultValue": "australiasoutheast",
            "type": "String"
        },
		"enabledForDeployment": {
			"type": "bool",
			"defaultValue": true,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
			}
		},
		"enabledForDiskEncryption": {
			"type": "bool",
			"defaultValue": true,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
			}
		},
		"enabledForTemplateDeployment": {
			"type": "bool",
			"defaultValue": true,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
			}
		},
		"skuName": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": [
				"Standard",
				"Premium"
			],
			"metadata": {
				"description": "Specifies whether the key vault is a standard vault or a premium vault."
			}
		},
		"vnetName": {
			"type": "string",
			"defaultValue": "vnet-npd-mel-workloads-01"
		},
		"subNetName": {
			"type": "string",
			"defaultValue": "sn-npd-mel-dev-ase-01"
		},
		"objectIdUser": {
			"type": "string",
			"defaultValue": "80079d54-e89e-4f00-84c1-0300656c4fd7"
		},
		"permissionsKeys": { 
			"type": "array",
			"defaultValue": ["Get","List","Update","Create","Import","Delete","Recover","Backup","Restore"]
		},
		"permissionsSecrets": { 
			"type": "array",
			"defaultValue": ["Get","List","Set","Delete","Recover","Backup","Restore"]
		},
		"permissionsCertificates": { 
			"type": "array",
			"defaultValue": ["Get","List","Update","Create","Import","Delete","Recover","Backup","Restore","ManageContacts","ManageIssuers","GetIssuers","ListIssuers","SetIssuers","DeleteIssuers"]
		},
        "logAnalyticsName": {
            "type": "string",
            "defaultValue": "la-npd-mel-dev-adap-main" 
        },
		"actionGroupName": { 
			"type": "string",
			"defaultValue": "ag-npd-mel-dev-adap"
		},
		"alertDescription": {
			"type": "string",
			"defaultValue": "Default Alert for the resource."
		}
	},
    "variables": {
		"subscriptionId" : "[subscription().subscriptionId]",
		"tenantId" : "[subscription().tenantId]",
		"subscriptionName":"[if(or(equals(parameters('environment'),'prd'),equals(parameters('environment'),'stg')),'prd','npd')]",
		"subscriptionLocation" : "[concat(variables('subscriptionName'),'-',parameters('airportLocationCode'))]",
		"subscriptionLocationEnvironment" : "[concat(variables('subscriptionLocation'),'-',parameters('environment'))]",
        "keyVaultName": "[concat('kv-', variables('subscriptionLocationEnvironment'),'-', parameters('projectName'),'-',parameters('descriptiveContext'))]",
		"vnetFullPath": "[concat('/subscriptions/',variables('subscriptionId'),'/resourceGroups/rg-',variables('subscriptionLocation'),'-network/providers/Microsoft.Network/virtualNetworks/',parameters('vnetName'),'/subnets/',parameters('subNetName'))]",
		"accessPoliciesUser" : {"tenantId": "[variables('tenantId')]", "objectId": "[parameters('objectIdUser')]","permissions": {"keys": "[parameters('permissionsKeys')]","secrets": "[parameters('permissionsSecrets')]", "certificates": "[parameters('permissionsCertificates')]"}},
		"accessPolicies": ["[variables('accessPoliciesUser')]"],
        "diagnosticSettingName": "[concat('diag','-', variables('subscriptionName'),'-', parameters('airportLocationCode'),'-',toLower(parameters('environment')),'-', parameters('projectName'), '-', 'kv', '-', parameters('descriptiveContext'))]",
		"alertName": "[concat('alrt-', variables('subscriptionLocationEnvironment'),'-', parameters('projectName'),'-kv-',parameters('descriptiveContext'))]"
    },	
	"resources": [{
			"type": "Microsoft.KeyVault/vaults",
			"name": "[variables('keyVaultName')]",
			"location": "[parameters('resourceGroupLocation')]",
			"apiVersion": "2018-02-14",
			"tags": {
				"displayName": "KeyVault"
			},
			"properties": {
				"enabledForDeployment": "[parameters('enabledForDeployment')]",
				"enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
				"enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
				"tenantId": "[variables('tenantId')]",
				"accessPolicies": "[variables('accessPolicies')]",
				"sku": {
					"name": "[parameters('skuName')]",
					"family": "A"
				},
				"networkAcls": {
					"defaultAction": "Deny",
					"bypass": "AzureServices",
					"virtualNetworkRules": [
						{
							"id": "[variables('vnetFullPath')]",
							"ignoreMissingVnetServiceEndpoint": false
						}
					]
				}
			}
		},
        {
			"type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
			"apiVersion": "2017-05-01-preview",
			"name": "[concat(variables('keyVaultName'), '/Microsoft.Insights/', variables('diagnosticSettingName'))]",
			"location": "Global",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
			"properties": {
                "name": "[variables('diagnosticSettingName')]",
				"workspaceId": "[resourceId('Microsoft.Operationalinsights/workspaces', parameters('logAnalyticsName'))]",
                "logs": [
                    {
                        "category": "AuditEvent",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
			}
		},
        {
            "type": "microsoft.insights/activityLogAlerts",
            "apiVersion": "2017-04-01",
            "name": "[variables('alertName')]",
            "location": "Global",
            "properties": {
                "scopes": ["[concat('/subscriptions/',variables('subscriptionId'))]"],
                "condition": {
                    "allOf": [
                        {
                            "field": "category",
                            "equals": "Administrative"
                        },
                        {
                            "field": "resourceId",
                            "equals": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                        }
                    ]
                },
                "actions": {
                    "actionGroups": [
                        {
                            "actionGroupId": "[resourceId('Microsoft.Insights/ActionGroups', parameters('actionGroupName'))]",
                            "webhookProperties": {}
                        }
                    ]
                },
                "enabled": true,
                "description": "[parameters('alertDescription')]"
            }
        }		
	]
}
